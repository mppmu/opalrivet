#! /usr/bin/env python

"""\
%prog rootfile [yodafile]

Convert a ROOT data file to the  YODA data format.
"""

import yoda, os, sys, optparse
from yoda.script_helpers import parse_x2y_args

parser = optparse.OptionParser(usage=__doc__)
opts, args = parser.parse_args()
in_out = parse_x2y_args(args, ".root", ".yoda")
#in_out=([1,"output_200_207.root"])
print in_out
if not in_out:
    sys.stderr.write("You must specify the YODA and ROOT file names\n")
    sys.exit(1)
print "LL"
import ROOT
for i, o in in_out:
  print "LLXX"
  of = ROOT.TFile("output_200_207.root", "r")
  if (of.IsOpen()==None):
		print "<E> Cannot open input file"+o
		sys.exit(1)
  TListlist = of.GetListOfKeys() 
  if (TListlist==None):  
   print "<E> No keys found in file"
   sys.exit(1)
  nnext=ROOT.TIter(TListlist) 
  key =ROOT.TKey();
#  TObject* obj ;
  key = nnext()   
  while ( key != None ):
   obj = key.ReadObj()
   key=nnext() 
#    if (    (strcmp(obj.IsA()->GetName(),"TProfile")!=0) && (!obj.InheritsFrom("TH2")) && (!obj.InheritsFrom("TH1"))  )
     
#      print "<W> Object %s is not 1D or 2D histogram : "
#      print "will not be converted\n"+obj->GetName()    
   print "Histo name:"+obj.GetName()+obj.GetTitle()

#   analysisobjects = yoda.readYODA(i)
#   rootobjects = [yoda.to_root(ao) for ao in analysisobjects.values()]
   #print rootobjects
#   of.Write()
  of.Close()


#void loop(const char* filein="test.root")
#{
#  TFile* fin = new TFile(filein) ;#
#
#  if (!fin->IsOpen()) {
#    printf("<E> Cannot open input file %s\n",filein) ;
#    exit(1) ;
#  }
#  
#  TList* list = fin->GetListOfKeys() ;
#  if (!list) { printf("<E> No keys found in file\n") ; exit(1) ; }
#  TIter next(list) ;
#  TKey* key ;
#  TObject* obj ;
#      
#  while ( key = (TKey*)next() ) {
#    obj = key->ReadObj() ;
#    if (    (strcmp(obj->IsA()->GetName(),"TProfile")!=0)
#         && (!obj->InheritsFrom("TH2"))#
#	 && (!obj->InheritsFrom("TH1")) 
#       ) {
#      printf("<W> Object %s is not 1D or 2D histogram : "
#             "will not be converted\n",obj->GetName()) ;
#    }
#    printf("Histo name:%s title:%s\n",obj->GetName(),obj->GetTitle());
#  }
#}
